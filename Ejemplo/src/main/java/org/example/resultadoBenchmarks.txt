07:35:58 p. m.: Executing ':StreamBenchmark.main()'...

> Task :compileJava
> Task :processResources NO-SOURCE
> Task :classes

> Task :StreamBenchmark.main()
# JMH version: 1.33
# VM version: JDK 18.0.2, OpenJDK 64-Bit Server VM, 18.0.2+9-FR
# VM invoker: C:\Users\lucap\.jdks\corretto-18.0.2\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=ES -Duser.language=es -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.example.StreamBenchmark.paralellStreamFilter

# Run progress: 0,00% complete, ETA 00:05:00
# Fork: 1 of 1
# Warmup Iteration   1: 2,726 ops/s
# Warmup Iteration   2: 4,564 ops/s
# Warmup Iteration   3: 5,289 ops/s
# Warmup Iteration   4: 5,191 ops/s
# Warmup Iteration   5: 4,037 ops/s
Iteration   1: 5,278 ops/s
Iteration   2: 5,245 ops/s
Iteration   3: 5,619 ops/s
Iteration   4: 5,922 ops/s
Iteration   5: 5,992 ops/s
Iteration   6: 5,447 ops/s
Iteration   7: 5,443 ops/s
Iteration   8: 5,287 ops/s
Iteration   9: 5,505 ops/s
Iteration  10: 6,119 ops/s


Result "org.example.StreamBenchmark.paralellStreamFilter":
  5,586 �(99.9%) 0,481 ops/s [Average]
  (min, avg, max) = (5,245, 5,586, 6,119), stdev = 0,318
  CI (99.9%): [5,105, 6,067] (assumes normal distribution)


# JMH version: 1.33
# VM version: JDK 18.0.2, OpenJDK 64-Bit Server VM, 18.0.2+9-FR
# VM invoker: C:\Users\lucap\.jdks\corretto-18.0.2\bin\java.exe
# VM options: -Dfile.encoding=windows-1252 -Duser.country=ES -Duser.language=es -Duser.variant
# Blackhole mode: full + dont-inline hint (default, use -Djmh.blackhole.autoDetect=true to auto-detect)
# Warmup: 5 iterations, 10 s each
# Measurement: 10 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: org.example.StreamBenchmark.streamFilter

# Run progress: 50,00% complete, ETA 00:02:33
# Fork: 1 of 1
# Warmup Iteration   1: 7,656 ops/s
# Warmup Iteration   2: 7,871 ops/s
# Warmup Iteration   3: 7,641 ops/s
# Warmup Iteration   4: 7,333 ops/s
# Warmup Iteration   5: 6,852 ops/s
Iteration   1: 7,456 ops/s
Iteration   2: 7,266 ops/s
Iteration   3: 7,510 ops/s
Iteration   4: 7,661 ops/s
Iteration   5: 7,067 ops/s
Iteration   6: 6,820 ops/s
Iteration   7: 7,595 ops/s
Iteration   8: 7,547 ops/s
Iteration   9: 7,328 ops/s
Iteration  10: 7,593 ops/s


Result "org.example.StreamBenchmark.streamFilter":
  7,384 �(99.9%) 0,406 ops/s [Average]
  (min, avg, max) = (6,820, 7,384, 7,661), stdev = 0,268
  CI (99.9%): [6,978, 7,790] (assumes normal distribution)


# Run complete. Total time: 00:05:06

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                              Mode  Cnt  Score   Error  Units
StreamBenchmark.paralellStreamFilter  thrpt   10  5,586 � 0,481  ops/s
StreamBenchmark.streamFilter          thrpt   10  7,384 � 0,406  ops/s

Deprecated Gradle features were used in this build, making it incompatible with Gradle 8.0.

You can use '--warning-mode all' to show the individual deprecation warnings and determine if they come from your own scripts or plugins.

See https://docs.gradle.org/7.5.1/userguide/command_line_interface.html#sec:command_line_warnings

BUILD SUCCESSFUL in 5m 9s
2 actionable tasks: 2 executed
07:41:08 p. m.: Execution finished ':StreamBenchmark.main()'.